// Generate schema: npx prisma generate
// Create migration: npx prisma migrate dev --name init --create-only
// Appy migration: npx prisma migrate deploy

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Users {
    id        Int      @id @default(autoincrement())
    email     String   @unique
    image     String?
    firstName String?
    lastName  String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    events     Events[]
    userEvents UserEvents[]
    userRoles  UserRoles[]
}

model UserRoles {
    id        Int      @id @default(autoincrement())
    userId    Int
    roleId    Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
    role Roles @relation(fields: [roleId], references: [id], onDelete: Cascade)

    @@unique([userId, roleId])
    @@index([userId])
    @@index([roleId])
    @@index([userId, roleId])
    @@index([roleId, userId])
}

model Roles {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userRoles UserRoles[]
}

model Events {
    id          Int       @id @default(autoincrement())
    name        String
    description String?   @db.VarChar(500)
    location    String?
    startDate   DateTime
    endDate     DateTime?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    ownerId     Int       @default(23) // This is temporary in a PROD environment this would always be populated

    owner Users @relation(fields: [ownerId], references: [id]) // Creator of the event

    userEvents UserEvents[] // Attendees
}

model UserEvents {
    id        Int      @id @default(autoincrement())
    userId    Int
    eventId   Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user  Users  @relation(fields: [userId], references: [id], onDelete: Cascade)
    event Events @relation(fields: [eventId], references: [id], onDelete: Cascade)

    @@unique([userId, eventId])
    @@index([userId])
    @@index([eventId])
    @@index([userId, eventId])
    @@index([eventId, userId])
}
